package matrixlib { 


class MatrixLib { 

  static query rowMult(s : Sequence(double), m : Sequence(Sequence(double))) : Sequence(double)  
  pre: true 
  post: result = Integer.subrange(1, s.size)->collect( i | Integer.Sum(1, m.size, k, s[k]*(m[k]->at(i))));

   static query matrixMultiplication(m1: Sequence(Sequence(double)), m2 : Sequence(Sequence(double))) : Sequence(Sequence(double))
   pre: true
   post: result = m1->collect( row | MatrixLib.rowMult(row, m2) );

  static query subRows(m : Sequence, s : Sequence(int)) : Sequence 
  pre: true
  post: result = s->select( i | 1 <= i & i <= m->size() )->collect( j | m->at(j) );

  static query subMatrix(m : Sequence(Sequence), rows : Sequence(int), cols : Sequence(int)) : Sequence 
  pre: true
  post: result = rows->select( i | 1 <= i & i <= m->size() )->collect( j | MatrixLib.subRows(m->at(j), cols) );

  static query matrixExcludingRowColumn(m : Sequence, row : int, col : int) : Sequence 
  pre: true
  post: true
  activity: 
    var res : Sequence := Sequence{}; 
    for i : Integer.subrange(1,m->size())
    do
      (if i /= row 
       then 
         var r : Sequence := m->at(i)->oclAsType(Sequence);
         var subrow : Sequence :=  
           Integer.subrange(1,r->size())->select( j | j /= col )->collect( j | r->at(j));
         res := res->append(subrow)
       else skip);
    return res;  

 static query column(m : Sequence, i : int) : Sequence
 pre: true 
 post: 
   (m->at(1)->oclIsTypeOf(Sequence) => 
      result = m->collect( r | r->oclAsType(Sequence)->at(i) )) & 
   (true => result = m->at(i)); 

 static query shape(x : OclAny) : Sequence(int)
 pre: true
 post: true
 activity: 
    var res : Sequence(int) := Sequence{}->collect(0); 
    if x->oclIsTypeOf(Sequence)
    then 
      var sq : Sequence := x->oclAsType(Sequence) ; 
      res := Sequence{ sq->size() } ; 
      if sq->size() > 0 
      then 
        res := res->union(MatrixLib.shape(sq->at(1)))
      else 
        return res
    else 
      return res ; 
    return res;

  static query singleValueMatrix(sh : Sequence(int), x : OclAny) : Sequence
  pre: true 
  post: true
  activity: 
    if sh->size() = 0 
    then 
      return Sequence{}
    else skip ; 

    if sh->size() = 1 
    then 
      return Integer.subrange(1,sh->at(1))->collect(x)
    else skip ; 
      
    var res : Sequence := Sequence{} ;
 
    res := Integer.subrange(1,sh->at(1))->collect(MatrixLib.singleValueMatrix(sh->tail(), x)) ; 

    return res; 


  static query fillMatrixFrom(sq : Sequence(double), sh : Sequence(int)) : Sequence
  pre: true 
  post: true
  activity: 
    if sh->size() = 0 
    then 
      return Sequence{}
    else skip ; 

    if sh->size() = 1 
    then 
      return sq.subrange(1,sh->at(1))
    else skip ; 
      
    var res : Sequence := Sequence{} ; 
    var prod : int := sh->tail()->prd() ; 

    for i : Integer.subrange(1,sh->at(1))
    do 
      (var rowi : Sequence := 
         MatrixLib.fillMatrixFrom(sq.subrange(1 + prod*(i-1), prod*i), sh->tail()) ; 
       res := res->append(rowi) ) ;
 
    return res; 

  static query identityMatrix(n : int) : Sequence(Sequence(double))
  pre: true 
  post: 
    result = Integer.subrange(1,n)->collect( i | Integer.subrange(1,n)->collect( j | if i = j then 1.0 else 0.0 endif ) ); 

  static query flattenMatrix(m : Sequence) : Sequence 
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
     (var sq : Sequence := m->at(1)->oclAsType(Sequence) ;
      return MatrixLib.flattenMatrix(sq)->union(MatrixLib.flattenMatrix(m->tail()))
     )
    else
      skip; 
 
    return m; 

  static query sumMatrix(m : Sequence) : double 
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return 0.0
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
     (var sq : Sequence := m->at(1)->oclAsType(Sequence) ;
      return MatrixLib.sumMatrix(sq) + MatrixLib.sumMatrix(m->tail())
     )
    else 
      skip; 
      
    var dmat : Sequence(double) := Sequence{0.0}->union(m); 
    return dmat->sum(); 


  static query prdMatrix(m : Sequence) : double 
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return 1.0
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
     (var sq : Sequence := m->at(1)->oclAsType(Sequence); 
      return MatrixLib.prdMatrix(sq)*(MatrixLib.prdMatrix(m->tail()))
     )
    else 
      skip; 

    var dmat : Sequence(double) := Sequence{1.0}->union(m); 
    return dmat->prd(); 


  static query elementwiseApply(m : Sequence, 
                      f : Function(double,double)) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
         MatrixLib.elementwiseApply(_r->oclAsType(Sequence), f))
    else 
      skip;

    var dmat : Sequence(double) := Sequence{}->collect(0.0);

    for x : m 
    do 
      (var y : double := x->oclAsType(double);  
       dmat := dmat->append(f->apply(y))
      );
    return dmat; 
 
  static query selectElements(m : Sequence, 
                      f : Function(double,boolean)) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
         MatrixLib.selectElements(_r->oclAsType(Sequence), f))
    else 
      skip;

    var dmat : Sequence(double) := Sequence{}->collect(0.0);

    for x : m 
    do 
      (var y : double := x->oclAsType(double);  
       if (f->apply(y)) then dmat := dmat->append(y)
       else skip
      );
    return dmat; 

  static query elementwiseNot(m : Sequence) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
          MatrixLib.elementwiseNot(_r->oclAsType(Sequence)))
    else 
      skip;

    var dmat : Sequence(boolean) := Sequence{}->collect(false);
    for z : m
    do
      (var y : boolean := z->oclAsType(boolean);  
       dmat := dmat->append(if y then false else true endif)
      );
    return dmat; 

   static query elementwiseMult(m : Sequence, x : double) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
          MatrixLib.elementwiseMult(_r->oclAsType(Sequence), x))
    else 
      skip;

    var dmat : Sequence(double) := Sequence{}->collect(0.0);
    for z : m
    do
      (var y : double := z->oclAsType(double);  
       dmat := dmat->append(y*x)
      );
    return dmat; 
 
   static query elementwisePower(m : Sequence, x : double) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
          MatrixLib.elementwisePower(_r->oclAsType(Sequence), x))
    else 
      skip;

    var dmat : Sequence(double) := Sequence{}->collect(0.0);
    for z : m
    do
      (var y : double := z->oclAsType(double);  
       dmat := dmat->append(y->pow(x))
      );
    return dmat; 
 

  static query elementwiseAdd(m : Sequence, x : double) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
         MatrixLib.elementwiseAdd(_r->oclAsType(Sequence), x))
    else 
      skip;

    var dmat : Sequence(double) := Sequence{}->collect(0.0);
    for z : m
    do
      (var y : double := z->oclAsType(double);  
       dmat := dmat->append(y + x)
      );
    return dmat; 

  static query elementwiseSubtract(m : Sequence, x : double) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
         MatrixLib.elementwiseSubtract(_r->oclAsType(Sequence), x))
    else 
      skip;

    var dmat : Sequence(double) := Sequence{}->collect(0.0);
    for z : m
    do
      (var y : double := z->oclAsType(double);  
       dmat := dmat->append(y - x)
      );
    return dmat; 


   static query elementwiseDivide(m : Sequence, x : double) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
         MatrixLib.elementwiseDivide(_r->oclAsType(Sequence), x))
    else 
      skip;

    var dmat : Sequence(double) := Sequence{}->collect(0.0);
    for z : m
    do
      (var y : double := z->oclAsType(double);  
       dmat := dmat->append(y/x)
      );
    return dmat; 


  static query elementwiseLess(m : Sequence, x : double) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
         MatrixLib.elementwiseLess(_r->oclAsType(Sequence), x))
    else 
      skip;

    var dmat : Sequence(boolean) := Sequence{}->collect(false);
    for z : m
    do
      (var y : double := z->oclAsType(double);  
       dmat := dmat->append(if y < x then true else false endif)
      );
    return dmat; 

  static query elementwiseGreater(m : Sequence, x : double) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
        MatrixLib.elementwiseGreater(_r->oclAsType(Sequence), x))
    else 
      skip;

    var dmat : Sequence(boolean) := Sequence{}->collect(false);
    for z : m
    do
      (var y : double := z->oclAsType(double);  
       dmat := dmat->append(if y > x then true else false endif)
      );
    return dmat; 


  static query elementwiseEqual(m : Sequence, x : double) : Sequence
  pre: true 
  post: true
  activity: 
    if m->size() = 0 
    then 
      return Sequence{}
    else skip; 

    if m->at(1)->oclIsTypeOf(Sequence) 
    then 
      return m->collect( _r | 
        MatrixLib.elementwiseEqual(_r->oclAsType(Sequence), x))
    else 
      skip;

    var dmat : Sequence(boolean) := Sequence{}->collect(false);
    for z : m
    do
      (var y : double := z->oclAsType(double);  
       dmat := dmat->append(if x = y then true else false endif)
      );
    return dmat; 


  static query detaux(x1 : double, x2 : double, y1 : double, y2 : double) : double 
  pre: true
  post: result = x1*y2 - x2*y1; 

  static query determinant2(m : Sequence) : double 
  pre: m->size() = 2 & m[1]->size() = 2
  post: true
  activity: 
    var m1 : Sequence := m[1]->oclAsType(Sequence); 
    var m2 : Sequence := m[2]->oclAsType(Sequence);

    var d11 : double := m1->at(1)->oclAsType(double); 
    var d12 : double := m1->at(2)->oclAsType(double); 
    var d21 : double := m2->at(1)->oclAsType(double); 
    var d22 : double := m2->at(2)->oclAsType(double); 

    return MatrixLib.detaux(d11, d12, d21, d22); 

  static query determinant3(m : Sequence(Sequence)) : double 
  pre: m->size() = 3 & m[1]->size() = 3
  post: true
  activity: 
    var subm1 : Sequence(Sequence) := 
      MatrixLib.subMatrix(m, Sequence{2,3}, Sequence{2,3}); 
    var subm2 : Sequence(Sequence) := 
      MatrixLib.subMatrix(m, Sequence{2,3}, Sequence{1,3}); 
    var subm3 : Sequence(Sequence) := 
      MatrixLib.subMatrix(m, Sequence{2,3}, Sequence{1,2}); 

    var m1 : Sequence := m[1]->oclAsType(Sequence); 
    
    return (m1->at(1)->oclAsType(double))* MatrixLib.determinant2(subm1) - 
       (m1->at(2)->oclAsType(double))*MatrixLib.determinant2(subm2) + 
       (m1->at(3)->oclAsType(double))*MatrixLib.determinant2(subm3); 

   static query determinant(m : Sequence) : double
   pre: true
   post: true
   activity:
     var n : int := m->size();  

     if n = 1 
     then 
       return m->at(1)->oclAsType(double)
     else 
       skip; 

     if n = 2 
     then
       return MatrixLib.determinant2(m)
     else 
       skip; 

     if n = 3 
     then 
       return MatrixLib.determinant3(m)
     else skip;  

     var res : double := 0.0; 
     var row : Sequence := m->at(1)->oclAsType(Sequence); 
     var factor : int := 1; 

     for i : Integer.subrange(1,n)
     do 
       (var submat : Sequence := 
          MatrixLib.matrixExcludingRowColumn(m,1,i); 
        var det : double := 
          MatrixLib.determinant(submat); 
        var rowi : double := row->at(i)->oclAsType(double); 
        res := res + factor*rowi*det;
        factor := -factor
       ); 
      return res; 

       
   static query rowAddition(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity:
     var res : Sequence := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
        (var sq1 : Sequence := m1->at(i)->oclAsType(Sequence); 
         var sq2 : Sequence := m2->at(i)->oclAsType(Sequence); 
         
         res := res->append(
                  MatrixLib.rowAddition(sq1, sq2))
        ); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
      (var m1j : double := m1->at(j)->oclAsType(double) ; 
       var m2j : double := m2->at(j)->oclAsType(double) ; 
       res := res->append(m1j + m2j)
      );
     return res;  
         

   static query matrixAddition(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity: 
     var res : Sequence := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
      (var sq1 : Sequence := m1->at(i)->oclAsType(Sequence); 
       var sq2 : Sequence := m2->at(i)->oclAsType(Sequence);
       res := res->append(MatrixLib.rowAddition(sq1, sq2))
      ); 
     return res; 


   static query rowSubtraction(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity:
     var res : Sequence := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
        (var sq1 : Sequence := m1->at(i)->oclAsType(Sequence); 
         var sq2 : Sequence := m2->at(i)->oclAsType(Sequence); 
         
         res := res->append(
            MatrixLib.rowSubtraction(sq1,sq2))
        ); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
      (var m1j : double := m1->at(j)->oclAsType(double) ; 
       var m2j : double := m2->at(j)->oclAsType(double) ; 
       res := res->append(m1j - m2j)
      );

     return res;  

   static query matrixSubtraction(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity: 
     var res : Sequence := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
      (var sq1 : Sequence := m1->at(i)->oclAsType(Sequence); 
       var sq2 : Sequence := m2->at(i)->oclAsType(Sequence);
       res := res->append(MatrixLib.rowSubtraction(sq1,sq2))
      ); 
     return res; 

   static query rowDotProduct(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity:
     var res : Sequence := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
        (var sq1 : Sequence := m1->at(i)->oclAsType(Sequence); 
         var sq2 : Sequence := m2->at(i)->oclAsType(Sequence); 
 
         res := res->append(MatrixLib.rowDotProduct(sq1, sq2))
        ); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
      (var m1j : double := m1->at(j)->oclAsType(double) ; 
       var m2j : double := m2->at(j)->oclAsType(double) ; 
       res := res->append(m1j * m2j)
      );
     return res;  
         

   static query dotProduct(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity: 
     var res : Sequence := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
      (var sq1 : Sequence := m1->at(i)->oclAsType(Sequence); 
       var sq2 : Sequence := m2->at(i)->oclAsType(Sequence);

       res := res->append(MatrixLib.rowDotProduct(sq1, sq2))
      ); 
     return res; 

   static query rowDotDivision(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity:
     var res : Sequence := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
        (var m1i : Sequence := m1->at(i)->oclAsType(Sequence);
         var m2i : Sequence := m2->at(i)->oclAsType(Sequence);
         res := res->append(
           MatrixLib.rowDotDivision(m1i, m2i) ) 
        ); 
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
      (var m1j : double := m1->at(j)->oclAsType(double) ; 
       var m2j : double := m2->at(j)->oclAsType(double) ; 
       res := res->append(m1j/m2j)
      ) ; 
     return res;  

   static query dotDivision(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity: 
     var res : Sequence := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
      (var sq1 : Sequence := m1->at(i)->oclAsType(Sequence); 
       var sq2 : Sequence := m2->at(i)->oclAsType(Sequence);
       res := res->append(MatrixLib.rowDotDivision(sq1, sq2))
      ); 
     return res; 

   static query rowLess(m1 : Sequence, 
                        m2 : Sequence) : Sequence
   pre: true
   post: true
   activity:
     var res : Sequence := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
        (var m1i : Sequence := m1->at(i)->oclAsType(Sequence);
         var m2i : Sequence := m2->at(i)->oclAsType(Sequence);
         res := res->append(
            MatrixLib.rowLess(m1i, m2i))
        ) ;

       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
      (var m1j : double := m1->at(j)->oclAsType(double) ; 
       var m2j : double := m2->at(j)->oclAsType(double) ; 
       
       res := res->append(
                    if m1j < m2j then true else false endif)
      );

     return res;  
         

   static query matrixLess(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity: 
     var res : Sequence := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
       (var m1i : Sequence := m1->at(i)->oclAsType(Sequence);
        var m2i : Sequence := m2->at(i)->oclAsType(Sequence);
         
        res := res->append(MatrixLib.rowLess(m1i, m2i))
       ) ; 
 
     return res; 

   static query rowGreater(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity:
     var res : Sequence := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
        (var m1i : Sequence := m1->at(i)->oclAsType(Sequence);
         var m2i : Sequence := m2->at(i)->oclAsType(Sequence);
         res := res->append(
           MatrixLib.rowGreater(m1i, m2i))
        ) ;
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
      (var m1j : double := m1->at(j)->oclAsType(double) ; 
       var m2j : double := m2->at(j)->oclAsType(double) ; 
       
       res := res->append(if m1j > m2j then true else false endif) );

     return res;  
         

   static query matrixGreater(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity: 
     var res : Sequence := Sequence{}; 

     for i : Integer.subrange(1,m1->size()) 
     do 
      (var r1 : Sequence := m1->at(i)->oclAsType(Sequence); 
       var r2 : Sequence := m2->at(i)->oclAsType(Sequence); 

       res := res->append(MatrixLib.rowGreater(r1, r2))
      ) ;
 
     return res; 

   static query rowMaximum(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity:
     var res : Sequence := Sequence{}; 
 
     if m1->at(1)->oclIsTypeOf(Sequence)
     then 
       for i : Integer.subrange(1, m1->size()) 
       do
        (var m1i : Sequence := m1->at(i)->oclAsType(Sequence);
         var m2i : Sequence := m2->at(i)->oclAsType(Sequence);
         res := res->append(
           MatrixLib.rowMaximum(m1i, m2i))
        ) ;
       return res
     else skip; 

     for j : Integer.subrange(1, m1->size())
     do 
      (var m1j : double := m1->at(j)->oclAsType(double) ; 
       var m2j : double := m2->at(j)->oclAsType(double) ; 
       
       res := res->append(if m1j > m2j then m1j else m2j endif) );

     return res;  
         

   static query matrixMaximum(m1 : Sequence, m2 : Sequence) : Sequence
   pre: true
   post: true
   activity: 
     var res : Sequence := Sequence{}; 

     for i : Integer.subrange(1, m1->size()) 
     do 
      (var r1 : Sequence := m1->at(i)->oclAsType(Sequence); 
       var r2 : Sequence := m2->at(i)->oclAsType(Sequence); 

       res := res->append(MatrixLib.rowMaximum(r1, r2))
      ) ;
 
     return res; 

   static query transpose(m : Sequence) : Sequence 
   pre: true
   post: true
   activity: 
     if m->at(1)->oclIsTypeOf(Sequence) 
     then skip else return m; 

     var res : Sequence := Sequence{}; 

     for i : Integer.subrange(1, m->size())
     do 
       res := res->append(MatrixLib.column(m,i)); 

     return res; 
 }


}
